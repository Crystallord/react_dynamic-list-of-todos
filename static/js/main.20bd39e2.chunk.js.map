{"version":3,"sources":["api.js","components/TodoList/TodoList.tsx","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["BASE_URL","getUser","userId","fetch","then","response","ok","Error","status","statusText","json","TodoList","state","todos","value","filterType","hundleChange","event","setState","target","filterActive","getFilteredTodos","filteredTodos","filter","todo","title","toLowerCase","includes","completed","items","this","props","changeUserId","selectedUserId","className","type","placeholder","onChange","defaultValue","disabled","map","classNames","readOnly","onClick","id","React","Component","CurrentUser","user","prevProps","name","email","phone","clearUser","App","chooseUserId","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.20bd39e2.chunk.js","sourcesContent":["const BASE_URL = 'https://mate.academy/students-api';\n\nexport const getTodos = () => {\n  return fetch(`${BASE_URL}/todos`)\n    .then(response => {\n      if (!response.ok) {\n        throw new Error(`${response.status} - ${response.statusText}`);\n      }\n\n      return response.json();\n    });\n};\n\nexport const getUser = (userId) => {\n  return fetch(`${BASE_URL}/users/${userId}`)\n    .then(response => {\n      if (!response.ok) {\n        throw new Error(`${response.status} - ${response.statusText}`);\n      }\n\n      return response.json();\n    });\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport { getTodos } from '../../api';\n\nimport './TodoList.scss';\n\ninterface Props {\n  selectedUserId: number;\n  changeUserId: (userId: number) => void;\n}\n\ninterface State {\n  todos: Todo[] | [];\n  value: string;\n  filterType: string;\n}\n\nexport class TodoList extends React.Component<Props, State> {\n  state: State = {\n    todos: [],\n    value: '',\n    filterType: 'all',\n  };\n\n  componentDidMount() {\n    getTodos()\n      .then((items: Todo[]) => {\n        this.setState({\n          todos: items,\n        });\n      });\n  }\n\n  hundleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({\n      value: event.target.value,\n    });\n  };\n\n  filterActive = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    this.setState({\n      filterType: event.target.value,\n    });\n  };\n\n  getFilteredTodos = () => {\n    const { todos, value, filterType } = this.state;\n\n    let filteredTodos = todos.filter((todo: Todo) => (\n      todo.title\n      && todo.title.toLowerCase()\n        .includes(value.toLowerCase())\n    ));\n\n    filteredTodos = filteredTodos.filter(todo => {\n      switch (filterType) {\n        case 'active':\n          return todo.completed === false;\n        case 'completed':\n          return todo.completed === true;\n        case 'all':\n        default:\n          return todo;\n      }\n    });\n\n    return filteredTodos;\n  };\n\n  render() {\n    const { changeUserId, selectedUserId } = this.props;\n\n    const filteredTodos: Todo[] | null = this.getFilteredTodos();\n\n    return (\n      <>\n        {filteredTodos && (\n          <div className=\"TodoList\">\n            <h2>Todos:</h2>\n\n            <input\n              className=\"TodoList__input\"\n              type=\"text\"\n              placeholder=\"Enter the name of the task\"\n              value={this.state.value}\n              onChange={this.hundleChange}\n            />\n\n            <select\n              onChange={this.filterActive}\n              defaultValue=\"\"\n            >\n              <option\n                value=\"\"\n                disabled\n              >\n                Filter by completeness\n              </option>\n              <option value=\"all\">\n                all\n              </option>\n              <option value=\"active\">\n                active\n              </option>\n              <option value=\"completed\">\n                completed\n              </option>\n            </select>\n\n            <div className=\"TodoList__list-container\">\n              <ul className=\"TodoList__list\">\n                {filteredTodos.map(todo => (\n                  <li\n                    className={classNames('TodoList__item', {\n                      'TodoList__item--unchecked': !todo.completed,\n                      'TodoList__item--checked': todo.completed,\n                    })}\n                    key={todo.id}\n                  >\n                    <label>\n                      <input type=\"checkbox\" readOnly />\n                      <p>{todo.title}</p>\n                    </label>\n\n                    <button\n                      className={classNames('TodoList__user-button button', {\n                        'TodoList__user-button--selected': todo.userId === selectedUserId,\n                      })}\n                      type=\"button\"\n                      onClick={() => changeUserId(todo.userId)}\n                    >\n                      {`User: ${todo.userId}`}\n                    </button>\n                  </li>\n                ))}\n              </ul>\n            </div>\n          </div>\n        )}\n      </>\n    );\n  }\n}\n","import React from 'react';\nimport './CurrentUser.scss';\nimport { getUser } from '../../api';\n\ninterface Props {\n  selectedUserId: number;\n  clearUser: () => void;\n}\n\ninterface State {\n  user: null | User;\n}\n\nexport class CurrentUser extends React.Component<Props, State> {\n  state: State = {\n    user: null,\n  };\n\n  componentDidMount() {\n    getUser(this.props.selectedUserId)\n      .then(user => {\n        this.setState({\n          user,\n        });\n      });\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps !== this.props) {\n      getUser(this.props.selectedUserId)\n        .then(user => {\n          this.setState({\n            user,\n          });\n        });\n    }\n  }\n\n  render() {\n    const { user } = this.state;\n\n    return (\n      <>\n        {user && (\n          <div className=\"CurrentUser\">\n            <h2 className=\"CurrentUser__title\"><span>{`Selected user: ${user.id}`}</span></h2>\n            <h3 className=\"CurrentUser__name\">{user.name}</h3>\n            <p className=\"CurrentUser__email\">{user.email}</p>\n            <p className=\"CurrentUser__phone\">{user.phone}</p>\n\n            <button\n              type=\"button\"\n              className=\"button CurrentUser__clear\"\n              onClick={this.props.clearUser}\n            >\n              Clear User\n            </button>\n          </div>\n        )}\n      </>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n\ninterface State {\n  selectedUserId: number;\n}\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    selectedUserId: 0,\n  };\n\n  clearUser = () => {\n    this.setState({\n      selectedUserId: 0,\n    });\n  };\n\n  chooseUserId = (userId: number) => {\n    this.setState({\n      selectedUserId: userId,\n    });\n  };\n\n  render() {\n    const { selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            selectedUserId={selectedUserId}\n            changeUserId={this.chooseUserId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                selectedUserId={selectedUserId}\n                clearUser={this.clearUser}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}